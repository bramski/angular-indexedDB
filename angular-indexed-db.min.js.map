{"version":3,"file":"angular-indexed-db.min.js","sources":["angular-indexed-db.js"],"names":["__slice","slice","angular","module","provider","IDBKeyRange","allTransactions","apiDirection","appendResultsToPromise","applyNeededUpgrades","cursorDirection","db","dbMode","dbName","dbPromise","dbVersion","defaultQueryOptions","errorMessageFor","indexedDB","readyState","upgradesByVersion","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","mozIDBKeyRange","webkitIDBKeyRange","msIDBKeyRange","readonly","readwrite","pending","next","nextunique","prev","prevunique","ascending","descending","useIndex","keyRange","direction","oldVersion","event","tx","$log","version","hasOwnProperty","log","e","target","webkitErrorMessage","error","message","errorCode","promise","results","then","this","connection","databaseName","upgradeDatabase","newVersion","callback","keys","Object","length","Math","max","apply","parseInt","$get","$q","$rootScope","DbQ","ObjectStore","Query","Transaction","addTransaction","closeDatabase","createDatabaseConnection","keyRangeForOptions","openDatabase","openTransaction","rejectWithError","validateStoreNames","deferred","$apply","reject","dbReq","defer","open","onsuccess","result","resolve","onblocked","onerror","onupgradeneeded","transaction","name","close","storeNames","found","storeName","_i","_len","objectStoreNames","contains","mode","options","beginKey","endKey","bound","push","index","indexOf","splice","setupCallbacks","prototype","oncomplete","_this","onabort","objectStore","abort","q","args","arguments","call","_ref","rejectWith","req","notify","dbErrorFunction","resolveWith","store","_mapCursor","mapFunc","openCursor","cursor","_arrayOperation","data","item","isArray","when","getAllKeys","key","clear","upsert","put","insert","add","getAll","value","eachWhere","query","indexName","findWhere","each","eachBy","count","find","get","findBy","$lt","upperBound","$gt","lowerBound","$lte","$gte","$eq","only","$between","low","hi","exLow","exHi","$desc","unique","$asc","$index","openStore","callBack","openStores","objectStores","_results","openAllStores","Array","deleteDatabase","queryDirection","flush","all","databaseInfo","stores","keyPath","autoIncrement","indices","indexNames"],"mappings":"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","sourcesContent":["\n/**\n @license $indexedDBProvider\n (c) 2014 Bram Whillock (bramski)\n Forked from original work by clements Capitan (webcss)\n License: MIT\n */\n\n(function() {\n  'use strict';\n  var __slice = [].slice;\n\n  angular.module('indexedDB', []).provider('$indexedDB', function() {\n    var IDBKeyRange, allTransactions, apiDirection, appendResultsToPromise, applyNeededUpgrades, cursorDirection, db, dbMode, dbName, dbPromise, dbVersion, defaultQueryOptions, errorMessageFor, indexedDB, readyState, upgradesByVersion;\n    indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n    IDBKeyRange = window.IDBKeyRange || window.mozIDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;\n    dbMode = {\n      readonly: \"readonly\",\n      readwrite: \"readwrite\"\n    };\n    readyState = {\n      pending: \"pending\"\n    };\n    cursorDirection = {\n      next: \"next\",\n      nextunique: \"nextunique\",\n      prev: \"prev\",\n      prevunique: \"prevunique\"\n    };\n    apiDirection = {\n      ascending: cursorDirection.next,\n      descending: cursorDirection.prev\n    };\n    dbName = '';\n    dbVersion = 1;\n    db = null;\n    upgradesByVersion = {};\n    dbPromise = null;\n    allTransactions = [];\n    defaultQueryOptions = {\n      useIndex: void 0,\n      keyRange: null,\n      direction: cursorDirection.next\n    };\n    applyNeededUpgrades = function(oldVersion, event, db, tx, $log) {\n      var version;\n      for (version in upgradesByVersion) {\n        if (!upgradesByVersion.hasOwnProperty(version) || version <= oldVersion) {\n          continue;\n        }\n        $log.log(\"$indexedDB: Running upgrade : \" + version + \" from \" + oldVersion);\n        upgradesByVersion[version](event, db, tx);\n      }\n    };\n    errorMessageFor = function(e) {\n      if (e.target.readyState === readyState.pending) {\n        return \"Error: Operation pending\";\n      } else {\n        return e.target.webkitErrorMessage || e.target.error.message || e.target.errorCode;\n      }\n    };\n    appendResultsToPromise = function(promise, results) {\n      if (results !== void 0) {\n        return promise.then(function() {\n          return results;\n        });\n      } else {\n        return promise;\n      }\n    };\n\n    /**\n    @ngdoc function\n    @name $indexedDBProvider.connection\n    @function\n    \n    @description\n    sets the name of the database to use\n    \n    @param {string} databaseName database name.\n    @returns {object} this\n     */\n    this.connection = function(databaseName) {\n      dbName = databaseName;\n      return this;\n    };\n\n    /**\n    @ngdoc function\n    @name $indexedDBProvider.upgradeDatabase\n    @function\n    \n    @description provides version number and steps to upgrade the database wrapped in a\n    callback function\n    \n    @param {number} newVersion new version number for the database.\n    @param {function} callback the callback which proceeds the upgrade\n    @returns {object} this\n     */\n    this.upgradeDatabase = function(newVersion, callback) {\n      var keys;\n      upgradesByVersion[newVersion] = callback;\n      keys = Object.keys(upgradesByVersion);\n      if (keys.length > 1) {\n        dbVersion = Math.max.apply(null, keys);\n      } else {\n        dbVersion = parseInt(keys[0]);\n      }\n      return this;\n    };\n    this.$get = [\n      '$q', '$rootScope', '$log', function($q, $rootScope, $log) {\n        var DbQ, ObjectStore, Query, Transaction, addTransaction, closeDatabase, createDatabaseConnection, keyRangeForOptions, openDatabase, openTransaction, rejectWithError, validateStoreNames;\n        rejectWithError = function(deferred) {\n          return function(error) {\n            return $rootScope.$apply(function() {\n              return deferred.reject(errorMessageFor(error));\n            });\n          };\n        };\n        createDatabaseConnection = function() {\n          var dbReq, deferred;\n          deferred = $q.defer();\n          dbReq = indexedDB.open(dbName, dbVersion || 1);\n          dbReq.onsuccess = function() {\n            db = dbReq.result;\n            $rootScope.$apply(function() {\n              deferred.resolve(db);\n            });\n          };\n          dbReq.onblocked = dbReq.onerror = rejectWithError(deferred);\n          dbReq.onupgradeneeded = function(event) {\n            var tx;\n            db = event.target.result;\n            tx = event.target.transaction;\n            $log.log(\"$indexedDB: Upgrading database '\" + db.name + \"' from version \" + event.oldVersion + \" to version \" + event.newVersion + \" ...\");\n            applyNeededUpgrades(event.oldVersion, event, db, tx, $log);\n          };\n          return deferred.promise;\n        };\n        openDatabase = function() {\n          return dbPromise || (dbPromise = createDatabaseConnection());\n        };\n        closeDatabase = function() {\n          return openDatabase().then(function() {\n            db.close();\n            db = null;\n            return dbPromise = null;\n          });\n        };\n        validateStoreNames = function(storeNames) {\n          var found, storeName, _i, _len;\n          found = true;\n          for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n            storeName = storeNames[_i];\n            found = found & db.objectStoreNames.contains(storeName);\n          }\n          return found;\n        };\n        openTransaction = function(storeNames, mode) {\n          if (mode == null) {\n            mode = dbMode.readonly;\n          }\n          return openDatabase().then(function() {\n            if (!validateStoreNames(storeNames)) {\n              return $q.reject(\"Object stores \" + storeNames + \" do not exist.\");\n            }\n            return new Transaction(storeNames, mode);\n          });\n        };\n        keyRangeForOptions = function(options) {\n          if (options.beginKey && options.endKey) {\n            return IDBKeyRange.bound(options.beginKey, options.endKey);\n          }\n        };\n        addTransaction = function(transaction) {\n          allTransactions.push(transaction.promise);\n          return transaction.promise[\"finally\"](function() {\n            var index;\n            index = allTransactions.indexOf(transaction.promise);\n            if (index > -1) {\n              return allTransactions.splice(index, 1);\n            }\n          });\n        };\n        Transaction = (function() {\n          function Transaction(storeNames, mode) {\n            if (mode == null) {\n              mode = dbMode.readonly;\n            }\n            this.transaction = db.transaction(storeNames, mode);\n            this.defer = $q.defer();\n            this.promise = this.defer.promise;\n            this.setupCallbacks();\n          }\n\n          Transaction.prototype.setupCallbacks = function() {\n            this.transaction.oncomplete = (function(_this) {\n              return function() {\n                return $rootScope.$apply(function() {\n                  return _this.defer.resolve(\"Transaction Completed\");\n                });\n              };\n            })(this);\n            this.transaction.onabort = (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.defer.reject(\"Transaction Aborted\", error);\n                });\n              };\n            })(this);\n            this.transaction.onerror = (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.defer.reject(\"Transaction Error\", error);\n                });\n              };\n            })(this);\n            return addTransaction(this);\n          };\n\n          Transaction.prototype.objectStore = function(storeName) {\n            return this.transaction.objectStore(storeName);\n          };\n\n          Transaction.prototype.abort = function() {\n            return this.transaction.abort();\n          };\n\n          return Transaction;\n\n        })();\n        DbQ = (function() {\n          function DbQ() {\n            this.q = $q.defer();\n            this.promise = this.q.promise;\n          }\n\n          DbQ.prototype.reject = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).reject.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.rejectWith = function(req) {\n            return req.onerror = req.onblocked = (function(_this) {\n              return function(e) {\n                return _this.reject(errorMessageFor(e));\n              };\n            })(this);\n          };\n\n          DbQ.prototype.resolve = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).resolve.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.notify = function() {\n            var args;\n            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n            return $rootScope.$apply((function(_this) {\n              return function() {\n                var _ref;\n                return (_ref = _this.q).notify.apply(_ref, args);\n              };\n            })(this));\n          };\n\n          DbQ.prototype.dbErrorFunction = function() {\n            return (function(_this) {\n              return function(error) {\n                return $rootScope.$apply(function() {\n                  return _this.q.reject(errorMessageFor(error));\n                });\n              };\n            })(this);\n          };\n\n          DbQ.prototype.resolveWith = function(req) {\n            this.rejectWith(req);\n            return req.onsuccess = (function(_this) {\n              return function(e) {\n                return _this.resolve(e.target.result);\n              };\n            })(this);\n          };\n\n          return DbQ;\n\n        })();\n        ObjectStore = (function() {\n          function ObjectStore(storeName, transaction) {\n            this.storeName = storeName;\n            this.store = transaction.objectStore(storeName);\n            this.transaction = transaction;\n          }\n\n          ObjectStore.prototype.defer = function() {\n            return new DbQ();\n          };\n\n          ObjectStore.prototype._mapCursor = function(defer, mapFunc, req) {\n            var results;\n            if (req == null) {\n              req = this.store.openCursor();\n            }\n            results = [];\n            defer.rejectWith(req);\n            return req.onsuccess = function(e) {\n              var cursor;\n              if (cursor = e.target.result) {\n                results.push(mapFunc(cursor));\n                defer.notify(mapFunc(cursor));\n                return cursor[\"continue\"]();\n              } else {\n                return defer.resolve(results);\n              }\n            };\n          };\n\n          ObjectStore.prototype._arrayOperation = function(data, mapFunc) {\n            var defer, item, req, results, _i, _len;\n            defer = this.defer();\n            if (!angular.isArray(data)) {\n              data = [data];\n            }\n            for (_i = 0, _len = data.length; _i < _len; _i++) {\n              item = data[_i];\n              req = mapFunc(item);\n              results = [];\n              defer.rejectWith(req);\n              req.onsuccess = function(e) {\n                results.push(e.target.result);\n                defer.notify(e.target.result);\n                if (results.length >= data.length) {\n                  return defer.resolve(results);\n                }\n              };\n            }\n            if (data.length === 0) {\n              return $q.when([]);\n            }\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.getAllKeys\n            @function\n          \n            @description\n            gets all the keys\n          \n            @returns {Q} A promise which will result with all the keys\n           */\n\n          ObjectStore.prototype.getAllKeys = function() {\n            var defer, req;\n            defer = this.defer();\n            if (this.store.getAllKeys) {\n              req = this.store.getAllKeys();\n              defer.resolveWith(req);\n            } else {\n              this._mapCursor(defer, function(cursor) {\n                return cursor.key;\n              });\n            }\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.clear\n            @function\n          \n            @description\n            clears all objects from this store\n          \n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.clear = function() {\n            var defer, req;\n            defer = this.defer();\n            req = this.store.clear();\n            defer.resolveWith(req);\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.delete\n            @function\n          \n            @description\n            Deletes the item at the key.  The operation is ignored if the item does not exist.\n          \n            @param {key} The key of the object to delete.\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype[\"delete\"] = function(key) {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store[\"delete\"](key));\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.upsert\n            @function\n          \n            @description\n            Updates the given item\n          \n            @param {data} Details of the item or items to update or insert\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.upsert = function(data) {\n            return this._arrayOperation(data, (function(_this) {\n              return function(item) {\n                return _this.store.put(item);\n              };\n            })(this));\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.insert\n            @function\n          \n            @description\n            Updates the given item\n          \n            @param {data} Details of the item or items to insert\n            @returns {Q} A promise that this can be done successfully.\n           */\n\n          ObjectStore.prototype.insert = function(data) {\n            return this._arrayOperation(data, (function(_this) {\n              return function(item) {\n                return _this.store.add(item);\n              };\n            })(this));\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.getAll\n            @function\n          \n            @description\n            Fetches all items from the store\n          \n            @returns {Q} A promise which resolves with copies of all items in the store\n           */\n\n          ObjectStore.prototype.getAll = function() {\n            var defer;\n            defer = this.defer();\n            if (this.store.getAll) {\n              defer.resolveWith(this.store.getAll());\n            } else {\n              this._mapCursor(defer, function(cursor) {\n                return cursor.value;\n              });\n            }\n            return defer.promise;\n          };\n\n          ObjectStore.prototype.eachWhere = function(query) {\n            var defer, direction, indexName, keyRange, req;\n            defer = this.defer();\n            indexName = query.indexName;\n            keyRange = query.keyRange;\n            direction = query.direction;\n            req = indexName ? this.store.index(indexName).openCursor(keyRange, direction) : this.store.openCursor(keyRange, direction);\n            this._mapCursor(defer, (function(cursor) {\n              return cursor.value;\n            }), req);\n            return defer.promise;\n          };\n\n          ObjectStore.prototype.findWhere = function(query) {\n            return this.eachWhere(query);\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.each\n            @function\n          \n            @description\n            Iterates through the items in the store\n          \n            @param {options.beginKey} the key to start iterating from\n            @param {options.endKey} the key to stop iterating at\n            @param {options.direction} Direction to iterate in\n            @returns {Q} A promise which notifies with each individual item and resolves with all of them.\n           */\n\n          ObjectStore.prototype.each = function(options) {\n            if (options == null) {\n              options = {};\n            }\n            return this.eachBy(void 0, options);\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.eachBy\n            @function\n          \n            @description\n            Iterates through the items in the store using an index\n          \n            @param {indexName} name of the index to use instead of the primary\n            @param {options.beginKey} the key to start iterating from\n            @param {options.endKey} the key to stop iterating at\n            @param {options.direction} Direction to iterate in\n            @returns {Q} A promise which notifies with each individual item and resolves with all of them.\n           */\n\n          ObjectStore.prototype.eachBy = function(indexName, options) {\n            var q;\n            if (indexName == null) {\n              indexName = void 0;\n            }\n            if (options == null) {\n              options = {};\n            }\n            q = new Query();\n            q.indexName = indexName;\n            q.keyRange = keyRangeForOptions(options);\n            q.direction = options.direction || defaultQueryOptions.direction;\n            return this.eachWhere(q);\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.count\n            @function\n          \n            @description\n            Returns a count of the items in the store\n          \n            @returns {Q} A promise which resolves with the count of all the items in the store.\n           */\n\n          ObjectStore.prototype.count = function() {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store.count());\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.find\n            @function\n          \n            @description\n            Fetches an item from the store\n          \n            @returns {Q} A promise which resolves with the item from the store\n           */\n\n          ObjectStore.prototype.find = function(key) {\n            var defer, req;\n            defer = this.defer();\n            req = this.store.get(key);\n            defer.rejectWith(req);\n            req.onsuccess = (function(_this) {\n              return function(e) {\n                if (e.target.result) {\n                  return defer.resolve(e.target.result);\n                } else {\n                  return defer.reject(\"\" + _this.storeName + \":\" + key + \" not found.\");\n                }\n              };\n            })(this);\n            return defer.promise;\n          };\n\n\n          /**\n            @ngdoc function\n            @name $indexedDBProvider.store.findBy\n            @function\n          \n            @description\n            Fetches an item from the store using a named index.\n          \n            @returns {Q} A promise which resolves with the item from the store.\n           */\n\n          ObjectStore.prototype.findBy = function(index, key) {\n            var defer;\n            defer = this.defer();\n            defer.resolveWith(this.store.index(index).get(key));\n            return defer.promise;\n          };\n\n          ObjectStore.prototype.query = function() {\n            return new Query();\n          };\n\n          return ObjectStore;\n\n        })();\n        Query = (function() {\n          function Query() {\n            this.indexName = void 0;\n            this.keyRange = void 0;\n            this.direction = cursorDirection.next;\n          }\n\n          Query.prototype.$lt = function(value) {\n            this.keyRange = IDBKeyRange.upperBound(value, true);\n            return this;\n          };\n\n          Query.prototype.$gt = function(value) {\n            this.keyRange = IDBKeyRange.lowerBound(value, true);\n            return this;\n          };\n\n          Query.prototype.$lte = function(value) {\n            this.keyRange = IDBKeyRange.upperBound(value);\n            return this;\n          };\n\n          Query.prototype.$gte = function(value) {\n            this.keyRange = IDBKeyRange.lowerBound(value);\n            return this;\n          };\n\n          Query.prototype.$eq = function(value) {\n            this.keyRange = IDBKeyRange.only(value);\n            return this;\n          };\n\n          Query.prototype.$between = function(low, hi, exLow, exHi) {\n            if (exLow == null) {\n              exLow = false;\n            }\n            if (exHi == null) {\n              exHi = false;\n            }\n            this.keyRange = IDBKeyRange.bound(low, hi, exLow, exHi);\n            return this;\n          };\n\n          Query.prototype.$desc = function(unique) {\n            this.direction = unique ? cursorDirection.prevunique : cursorDirection.prev;\n            return this;\n          };\n\n          Query.prototype.$asc = function(unique) {\n            this.direction = unique ? cursorDirection.nextunique : cursorDirection.next;\n            return this;\n          };\n\n          Query.prototype.$index = function(indexName) {\n            this.indexName = indexName;\n            return this;\n          };\n\n          return Query;\n\n        })();\n        return {\n\n          /**\n          @ngdoc method\n          @name $indexedDB.objectStore\n          @function\n          \n          @description an IDBObjectStore to use\n          \n          @params {string} storeName the name of the objectstore to use\n          @returns {object} ObjectStore\n           */\n          openStore: function(storeName, callBack, mode) {\n            if (mode == null) {\n              mode = dbMode.readwrite;\n            }\n            return openTransaction([storeName], mode).then(function(transaction) {\n              var results;\n              results = callBack(new ObjectStore(storeName, transaction));\n              return appendResultsToPromise(transaction.promise, results);\n            });\n          },\n          openStores: function(storeNames, callback, mode) {\n            if (mode == null) {\n              mode = dbMode.readwrite;\n            }\n            return openTransaction(storeNames, mode).then(function(transaction) {\n              var objectStores, results, storeName;\n              objectStores = (function() {\n                var _i, _len, _results;\n                _results = [];\n                for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n                  storeName = storeNames[_i];\n                  _results.push(new ObjectStore(storeName, transaction));\n                }\n                return _results;\n              })();\n              results = callback.apply(null, objectStores);\n              return appendResultsToPromise(transaction.promise, results);\n            });\n          },\n          openAllStores: function(callback, mode) {\n            if (mode == null) {\n              mode = dbMode.readwrite;\n            }\n            return openDatabase().then((function(_this) {\n              return function() {\n                var objectStores, results, storeName, storeNames, transaction;\n                storeNames = Array.prototype.slice.apply(db.objectStoreNames);\n                transaction = new Transaction(storeNames, mode);\n                objectStores = (function() {\n                  var _i, _len, _results;\n                  _results = [];\n                  for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n                    storeName = storeNames[_i];\n                    _results.push(new ObjectStore(storeName, transaction));\n                  }\n                  return _results;\n                })();\n                results = callback.apply(null, objectStores);\n                return appendResultsToPromise(transaction.promise, results);\n              };\n            })(this));\n          },\n\n          /**\n            @ngdoc method\n            @name $indexedDB.closeDatabase\n            @function\n          \n            @description Closes the database for use and completes all transactions.\n           */\n          closeDatabase: function() {\n            return closeDatabase();\n          },\n\n          /**\n            @ngdoc method\n            @name $indexedDB.deleteDatabase\n            @function\n          \n            @description Closes and then destroys the current database.  Returns a promise that resolves when this is persisted.\n           */\n          deleteDatabase: function() {\n            return closeDatabase().then(function() {\n              var defer;\n              defer = new DbQ();\n              defer.resolveWith(indexedDB.deleteDatabase(dbName));\n              return defer.promise;\n            })[\"finally\"](function() {\n              return $log.log(\"$indexedDB: \" + dbName + \" database deleted.\");\n            });\n          },\n          queryDirection: apiDirection,\n          flush: function() {\n            if (allTransactions.length > 0) {\n              return $q.all(allTransactions);\n            } else {\n              return $q.when([]);\n            }\n          },\n\n          /**\n            @ngdoc method\n            @name $indexedDB.databaseInfo\n            @function\n          \n            @description Returns information about this database.\n           */\n          databaseInfo: function() {\n            return openDatabase().then(function() {\n              var storeNames, transaction;\n              transaction = null;\n              storeNames = Array.prototype.slice.apply(db.objectStoreNames);\n              return openTransaction(storeNames, dbMode.readonly).then(function(transaction) {\n                var store, storeName, stores;\n                stores = (function() {\n                  var _i, _len, _results;\n                  _results = [];\n                  for (_i = 0, _len = storeNames.length; _i < _len; _i++) {\n                    storeName = storeNames[_i];\n                    store = transaction.objectStore(storeName);\n                    _results.push({\n                      name: storeName,\n                      keyPath: store.keyPath,\n                      autoIncrement: store.autoIncrement,\n                      indices: Array.prototype.slice.apply(store.indexNames)\n                    });\n                  }\n                  return _results;\n                })();\n                return transaction.promise.then(function() {\n                  return {\n                    name: db.name,\n                    version: db.version,\n                    objectStores: stores\n                  };\n                });\n              });\n            });\n          }\n        };\n      }\n    ];\n  });\n\n}).call(this);\n\n//# sourceMappingURL=angular-indexed-db.js.map\n"]}